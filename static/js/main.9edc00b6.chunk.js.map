{"version":3,"sources":["components/Preloader.js","DataHandling.js","components/CountyMap/County.js","components/CountyMap/CountyMap.js","components/Histogram/HistogramBar.js","components/Histogram/Axis.js","components/D3blackbox.js","components/Histogram/Histogram.js","components/Meta/USStatesMap.js","components/Meta/Title.js","components/Meta/Description.js","components/MedianLine.js","components/Controls/Toggle.js","components/Controls/ControlRow.js","components/Controls/index.js","App.js","serviceWorker.js","index.js","assets/preloading.png"],"names":["Preloader","react_default","a","createElement","className","src","PreloaderImg","style","width","alt","cleanIncome","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","cleanCounty","ChoroplethColors","_","reverse","County","nextProps","nextState","_this$props","this","props","zoom","value","_this$props2","geoPath","feature","quantize","color","fill","title","Component","CountyMap","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","projection","scale","state","range","usTopoJson","values","_this$state","us","USstatesMesh","topojson","objects","states","b","counties","features","countyValueMap","fromPairs","map","CountyMap_County","key","stroke","strokeLineJoin","translate","height","USstatePaths","find","USstateNames","centroid","domain","objectSpread","React","HistogramBar","_ref","percent","x","y","concat","label","toFixed","replace","transform","textAnchor","D3render","Axis","axis","tickFormat","ticks","data","length","anchorRef","current","_React$Component","Blackbox","_getPrototypeOf2","_len","arguments","args","Array","_key","apply","createRef","inherits","createClass","ref","Histogram","histogram","widthScale","yScale","makeBar","bar","N","axisMargin","x1","x0","Histogram_HistogramBar","_this$state2","bars","Histogram_Axis","thresholds","bins","counts","bottomMargin","USStatesMap","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","Title","mean","format","d3mean","yearsFragment","USstateFragment","jobTitleFragment","stateFragment","year","filteredBy","toUpperCase","_this$props$filteredB","jobTitle","scaleLinear","d3extent","Description","undefined","allData","filter","getFullYear","deviation","d3deviation","UStateFragment","previousYearFragment","countyFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","byCounty","groupBy","medians","medianIncomesByCounty","ordered","sortBy","keys","items","best","countyMedian","byCity","S","titleCase","s","jobFragment","yearFragment","href","MedianLine","median","line","medianValue","medianLabel","Toggle","onClick","ControlRow","makePick","picked","newState","updateDataFilter","capitalize","Controls_Toggle","_this2","toggleNames","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","updateYearFilter","reset","setState","reportUpdateUpTheChain","updateJobTitleFilter","updateUSstateFilter","_window$location$hash","window","location","hash","split","_window$location$hash2","slicedToArray","filters","join","years","Set","jobTitles","USstates","Controls_ControlRow","from","App","techSalaries","medianIncomes","countyNames","salariesFilter","callback","noop","Promise","all","then","_ref2","medianIncomesMap","forEach","isNull","medianIncomesByUSState","loadAllData","techSalariesMap","medianHousehold","salaries","_this3","components_Preloader","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Meta_Title","Meta_Description","components_CountyMap_CountyMap","components_Histogram_Histogram","components_MedianLine","components_Controls","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9edc00b6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport PreloaderImg from \"../assets/preloading.png\";\n\nconst Preloader = () => (\n    <div className=\"App container\">\n        <h1>The average H1B in tech pays $86,164/year</h1>{\" \"}\n        <p className=\"lead\">\n            Since 2012 the US tech industry has sponsored 176,075 H1B work\n            visas. Most of them paid <b>$60,660 to $111,668</b> per year (1\n            standard deviation).{\" \"}\n            <span>\n                The best city for an H1B is <b>Kirkland, WA</b> with an average\n                individual salary <b>$39,465 above local household median</b>.\n                Median household salary is a good proxy for cost of living in an\n                area.\n            </span>{\" \"}\n        </p>\n        <img\n            src={PreloaderImg}\n            style={{ width: \"100%\" }}\n            alt=\"Loading preview\"\n        />\n        <h2 className=\"text-center\">Loading data ...</h2>\n    </div>\n);\n\nexport default Preloader;\n","import * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nconst cleanIncome = d => ({\n    countyName: d[\"Name\"],\n    USstate: d[\"State\"],\n    medianIncome: Number(d[\"Median Household Income\"]),\n    lowerBound: Number(d[\"90% CI Lower Bound\"]),\n    upperBound: Number(d[\"90% CI Upper Bound\"])\n});\n\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\n\nconst cleanSalary = d => {\n    if (!d[\"base salary\"] || Number(d[\"base salary\"]) > 300000) {\n        return null;\n    }\n\n    return {\n        employer: d.employer,\n        submit_date: dateParse(d[\"submit date\"]),\n        start_date: dateParse(d[\"start date\"]),\n        case_status: d[\"case status\"],\n        job_title: d[\"job title\"],\n        clean_job_title: d[\"job title\"],\n        base_salary: Number(d[\"base salary\"]),\n        city: d[\"city\"],\n        USstate: d[\"state\"],\n        county: d[\"county\"],\n        countyID: d[\"countyID\"]\n    };\n};\n\nconst cleanUSStateName = d => ({\n    code: d.code,\n    id: Number(d.id),\n    name: d.name\n});\n\nconst cleanCounty = d => ({\n    id: Number(d.id),\n    name: d.name\n});\n\nexport const loadAllData = (callback = _.noop) => {\n    Promise.all([\n        d3.json(\"data/us.json\"),\n        d3.csv(\"data/us-county-names-normalized.csv\", cleanCounty),\n        d3.csv(\"data/county-median-incomes.csv\", cleanIncome),\n        d3.csv(\"data/h1bs-2012-2016.csv\", cleanSalary),\n        d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)\n    ]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {\n        let medianIncomesMap = {};\n\n        medianIncomes\n            .filter(d => _.find(countyNames, { name: d[\"countyName\"] }))\n            .forEach(d => {\n                d[\"countyID\"] = _.find(countyNames, {\n                    name: d[\"countyName\"]\n                }).id;\n                medianIncomesMap[d.countyID] = d;\n            });\n\n        techSalaries = techSalaries.filter(d => !_.isNull(d));\n\n        callback({\n            usTopoJson: us,\n            countyNames: countyNames,\n            medianIncomes: medianIncomesMap,\n            medianIncomesByCounty: _.groupBy(medianIncomes, \"countyName\"),\n            medianIncomesByUSState: _.groupBy(medianIncomes, \"USstate\"),\n            techSalaries: techSalaries,\n            USstateNames: USstateNames\n        });\n    });\n};\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nconst ChoroplethColors = _.reverse([\n    \"rgb(247,251,255)\",\n    \"rgb(222,235,247)\",\n    \"rgb(198,219,239)\",\n    \"rgb(158,202,225)\",\n    \"rgb(107,174,214)\",\n    \"rgb(66,146,198)\",\n    \"rgb(33,113,181)\",\n    \"rgb(8,81,156)\",\n    \"rgb(8,48,107)\"\n]);\nconst BlankColor = \"rgb(240,240,240)\";\n\nclass County extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        const { zoom, value } = this.props;\n\n        return zoom !== nextProps.zoom || value !== nextProps.value;\n    }\n\n    render() {\n        const { value, geoPath, feature, quantize } = this.props;\n\n        let color = BlankColor;\n\n        if (value) {\n            color = ChoroplethColors[quantize(value)];\n        }\n\n        return (\n            <path\n                d={geoPath(feature)}\n                style={{ fill: color }}\n                title={feature.id}\n            />\n        );\n    }\n}\nexport default County;\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport _ from \"lodash\";\n\nimport County from \"./County\";\n\nclass CountyMap extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const projection = d3.geoAlbersUsa().scale(1280);\n\n        this.state = {\n            geoPath: d3.geoPath().projection(projection),\n            quantize: d3.scaleQuantize().range(d3.range(9)),\n            projection\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        let { projection, quantize, geoPath } = state;\n\n        projection\n            .translate([props.width / 2, props.height / 2])\n            .scale(props.width * 1.3);\n\n        if (props.zoom && props.usTopoJson) {\n            const us = props.usTopoJson,\n                USstatePaths = topojson.feature(us, us.objects.states).features,\n                id = _.find(props.USstateNames, { code: props.zoom }).id;\n\n            projection.scale(props.width * 4.5);\n\n            const centroid = geoPath.centroid(_.find(USstatePaths, { id: id })),\n                translate = projection.translate();\n\n            projection.translate([\n                translate[0] - centroid[0] + props.width / 2,\n                translate[1] - centroid[1] + props.height / 2\n            ]);\n        }\n\n        if (props.values) {\n            quantize.domain([\n                d3.quantile(props.values, 0.15, d => d.value),\n                d3.quantile(props.values, 0.85, d => d.value)\n            ]);\n        }\n\n        return {\n            ...state,\n            projection,\n            quantize\n        };\n    }\n\n    render() {\n        const { usTopoJson, values, zoom } = this.props,\n            { geoPath, quantize } = this.state;\n\n        if (!usTopoJson) {\n            return null;\n        } else {\n            const us = usTopoJson,\n                USstatesMesh = topojson.mesh(\n                    us,\n                    us.objects.states,\n                    (a, b) => a !== b\n                ),\n                counties = topojson.feature(us, us.objects.counties).features;\n\n            const countyValueMap = _.fromPairs(\n                values.map(d => [d.countyID, d.value])\n            );\n\n            return (\n                <g>\n                    {counties.map(feature => (\n                        <County\n                            geoPath={geoPath}\n                            feature={feature}\n                            zoom={zoom}\n                            key={feature.id}\n                            quantize={quantize}\n                            value={countyValueMap[feature.id]}\n                        />\n                    ))}\n\n                    <path\n                        d={geoPath(USstatesMesh)}\n                        style={{\n                            fill: \"none\",\n                            stroke: \"#fff\",\n                            strokeLineJoin: \"round\"\n                        }}\n                    />\n                </g>\n            );\n        }\n    }\n}\n\nexport default CountyMap;\n","import React from \"react\";\n\nconst HistogramBar = ({ percent, x, y, width, height }) => {\n    let translate = `translate(${x}, ${y})`,\n        label = percent.toFixed(0) + \"%\";\n\n    if (percent < 1) {\n        label = percent.toFixed(2) + \"%\";\n    }\n\n    if (width < 20) {\n        label = label.replace(\"%\", \"\");\n    }\n\n    if (width < 10) {\n        label = \"\";\n    }\n\n    return (\n        <g transform={translate} className=\"bar\">\n            <rect\n                width={width}\n                height={height - 2}\n                transform=\"translate(0, 1)\"\n            />\n            <text textAnchor=\"end\" x={width - 5} y={height / 2 + 3}>\n                {label}\n            </text>\n        </g>\n    );\n};\n\nexport default HistogramBar;\n","import * as d3 from \"d3\";\nimport D3blackbox from \"../D3blackbox\";\n\nconst Axis = D3blackbox(function() {\n    const axis = d3\n        .axisLeft()\n        .tickFormat(d => `${d3.format(\".2s\")(d)}`)\n        .scale(this.props.scale)\n        .ticks(this.props.data.length);\n\n    d3.select(this.anchorRef.current).call(axis);\n});\n\nexport default Axis;\n","import React from \"react\";\n\nexport default function D3blackbox(D3render) {\n    return class Blackbox extends React.Component {\n        anchorRef = React.createRef();\n\n        componentDidMount() {\n            D3render.call(this);\n        }\n        componentDidUpdate() {\n            D3render.call(this);\n        }\n\n        render() {\n            const { x, y } = this.props;\n            return (\n                <g transform={`translate(${x}, ${y})`} ref={this.anchorRef} />\n            );\n        }\n    };\n}\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nimport HistogramBar from \"./HistogramBar\";\nimport Axis from \"./Axis\";\n\nclass Histogram extends React.Component {\n    state = {\n        histogram: d3.histogram(),\n        widthScale: d3.scaleLinear(),\n        yScale: d3.scaleLinear()\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        let { histogram, widthScale, yScale } = state;\n\n        histogram.thresholds(props.bins).value(props.value);\n\n        const bars = histogram(props.data),\n            counts = bars.map(d => d.length);\n\n        widthScale\n            .domain([d3.min(counts), d3.max(counts)])\n            .range([0, props.width - props.axisMargin]);\n\n        yScale\n            .domain([0, d3.max(bars, d => d.x1)])\n            .range([props.height - props.y - props.bottomMargin, 0]);\n\n        return {\n            ...state,\n            histogram,\n            widthScale,\n            yScale\n        };\n    }\n\n    makeBar = (bar, N) => {\n        const { yScale, widthScale } = this.state;\n\n        let percent = (bar.length / this.props.data.length) * 100;\n\n        let props = {\n            percent,\n            x: this.props.axisMargin,\n            y: yScale(bar.x1),\n            width: widthScale(bar.length),\n            height: yScale(bar.x0) - yScale(bar.x1),\n            key: `histogram-bar-${bar.x0}`\n        };\n\n        return <HistogramBar {...props} />;\n    };\n\n    render() {\n        const { histogram, yScale } = this.state,\n            { x, y, data, axisMargin } = this.props;\n\n        const bars = histogram(data);\n\n        return (\n            <g className=\"histogram\" transform={`translate(${x}, ${y})`}>\n                <g className=\"bars\">{bars.map(this.makeBar)}</g>\n                <Axis x={axisMargin - 3} y={0} data={bars} scale={yScale} />\n            </g>\n        );\n    }\n}\n\nexport default Histogram;\n","\nexport default {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AS\": \"American Samoa\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FM\": \"Federated States Of Micronesia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"GU\": \"Guam\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MH\": \"Marshall Islands\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"PR\": \"Puerto Rico\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n};\n","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport { mean as d3mean, extent as d3extent } from \"d3-array\";\n\nimport USStatesMap from \"./USStatesMap\";\n\nclass Title extends React.Component {\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === \"*\" ? \"\" : `in ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get jobTitleFragment() {\n        const { jobTitle, year } = this.props.filteredBy;\n        let title = \"\";\n\n        if (jobTitle === \"*\") {\n            if (year === \"*\") {\n                title = \"The average H1B in tech pays\";\n            } else {\n                title = \"The average tech H1B paid\";\n            }\n        } else {\n            title = `Software ${jobTitle}s on an H1B`;\n            if (year === \"*\") {\n                title += \" make\";\n            } else {\n                title += \" made\";\n            }\n        }\n\n        return title;\n    }\n\n    get format() {\n        return scaleLinear()\n            .domain(d3extent(this.props.data, d => d.base_salary))\n            .tickFormat();\n    }\n\n    render() {\n        const mean = this.format(d3mean(this.props.data, d => d.base_salary));\n        let title;\n\n        if (this.yearsFragment && this.USstateFragment) {\n            title = (\n                <h2>\n                    In {this.USstateFragment}, {this.jobTitleFragment} ${mean}\n                    /year {this.yearsFragment}\n                </h2>\n            );\n        } else {\n            title = (\n                <h2>\n                    {this.jobTitleFragment} ${mean}\n                    /year{\" \"}\n                    {this.USstateFragment\n                        ? `in ${this.stateFragment}`\n                        : \"\"}{\" \"}\n                    {this.yearsFragment}\n                </h2>\n            );\n        }\n\n        return title;\n    }\n}\n\nexport default Title;\n","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n    mean as d3mean,\n    extent as d3extent,\n    deviation as d3deviation\n} from \"d3-array\";\nimport _ from \"lodash\";\nimport S from \"string\";\n\nimport USStatesMap from \"./USStatesMap\";\n\nclass Description extends React.Component {\n    allDataForYear(year, data = this.props.allData) {\n        return data.filter(d => d.submit_date.getFullYear() === year);\n    }\n\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\n        return data.filter(d => d.clean_job_title === jobTitle);\n    }\n\n    allDataForUSstate(USstate, data = this.props.allData) {\n        return data.filter(d => d.USstate === USstate);\n    }\n\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === \"*\" ? \"\" : `In ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get previousYearFragment() {\n        const year = this.props.filteredBy.year;\n\n        let fragment;\n\n        if (year === \"*\") {\n            fragment = \"\";\n        } else if (year === 2012) {\n            fragment = \"\";\n        } else {\n            const { USstate, jobTitle } = this.props.filteredBy;\n            let lastYear = this.allDataForYear(year - 1);\n\n            if (jobTitle !== \"*\") {\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n            }\n\n            if (USstate !== \"*\") {\n                lastYear = this.allDataForUSstate(USstate, lastYear);\n            }\n\n            if (this.props.data.length / lastYear.length > 2) {\n                fragment =\n                    \", \" +\n                    (this.props.data.length / lastYear.length).toFixed() +\n                    \" times more than the year before\";\n            } else {\n                const percent = (\n                    (1 - lastYear.length / this.props.data.length) *\n                    100\n                ).toFixed();\n\n                fragment =\n                    \", \" +\n                    Math.abs(percent) +\n                    \"% \" +\n                    (percent > 0 ? \"more\" : \"less\") +\n                    \" than the year before\";\n            }\n        }\n\n        return fragment;\n    }\n\n    get jobTitleFragment() {\n        const jobTitle = this.props.filteredBy.jobTitle;\n        let fragment;\n\n        if (jobTitle === \"*\") {\n            fragment = \"H1B work visas\";\n        } else {\n            if (jobTitle === \"other\") {\n                fragment = \"H1B work visas\";\n            } else {\n                fragment = `H1B work visas for software ${jobTitle}s`;\n            }\n        }\n\n        return fragment;\n    }\n\n    get countyFragment() {\n        const byCounty = _.groupBy(this.props.data, \"countyID\"),\n            medians = this.props.medianIncomesByCounty;\n\n        let ordered = _.sortBy(\n            _.keys(byCounty)\n                .map(county => byCounty[county])\n                .filter(d => d.length / this.props.data.length > 0.01),\n            items =>\n                d3mean(items, d => d.base_salary) -\n                medians[items[0].countyID][0].medianIncome\n        );\n\n        let best = ordered[ordered.length - 1],\n            countyMedian = medians[best[0].countyID][0].medianIncome;\n\n        const byCity = _.groupBy(best, \"city\");\n\n        ordered = _.sortBy(\n            _.keys(byCity)\n                .map(city => byCity[city])\n                .filter(d => d.length / best.length > 0.01),\n            items => d3mean(items, d => d.base_salary) - countyMedian\n        );\n\n        best = ordered[ordered.length - 1];\n\n        const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\n            mean = d3mean(best, d => d.base_salary);\n\n        const jobFragment = this.jobTitleFragment\n            .replace(\"H1B work visas for\", \"\")\n            .replace(\"H1B work visas\", \"\");\n\n        return (\n            <span>\n                The best city{\" \"}\n                {jobFragment.length\n                    ? `for ${jobFragment} on an H1B`\n                    : \"for an H1B\"}{\" \"}\n                {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average\n                salary ${this.format(mean - countyMedian)} above the local\n                household median. Median household income is a good proxy for\n                cost of living in an area.{\" \"}\n                <a href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>\n                .\n            </span>\n        );\n    }\n\n    get format() {\n        return scaleLinear()\n            .domain(d3extent(this.props.data, d => d.base_salary))\n            .tickFormat();\n    }\n\n    render() {\n        const format = this.format,\n            mean = d3mean(this.props.data, d => d.base_salary),\n            deviation = d3deviation(this.props.data, d => d.base_salary);\n\n        return (\n            <p className=\"lead\">\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the{\" \"}\n                {this.UStateFragment} tech industry{\" \"}\n                {this.yearsFragment ? \"sponsored\" : \"has sponsored\"}{\" \"}\n                <b>\n                    {format(this.props.data.length)} {this.jobTitleFragment}\n                </b>\n                {this.previousYearFragment}. Most of them paid{\" \"}\n                <b>\n                    ${format(mean - deviation)} to ${format(mean + deviation)}\n                </b>{\" \"}\n                per year. {this.countyFragment}\n            </p>\n        );\n    }\n}\n\nexport default Description;\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst MedianLine = ({\n    data,\n    value,\n    width,\n    height,\n    x,\n    y,\n    bottomMargin,\n    median\n}) => {\n    const yScale = d3\n            .scaleLinear()\n            .domain([0, d3.max(data, value)])\n            .range([height - y - bottomMargin, 0]),\n        line = d3.line()([[0, 5], [width, 5]]);\n\n    const medianValue = median || d3.median(data, value);\n\n    const translate = `translate(${x}, ${yScale(medianValue)})`,\n        medianLabel = `Median Household: $${yScale.tickFormat()(medianValue)}`;\n\n    return (\n        <g className=\"mean\" transform={translate}>\n            <text x={width - 5} y={0} textAnchor=\"end\">\n                {medianLabel}\n            </text>\n            <path d={line} />>\n        </g>\n    );\n};\n\nexport default MedianLine;\n","import React from \"react\";\n\nconst Toggle = ({ label, name, value, onClick }) => {\n    let className = \"btn btn-default\";\n\n    if (value) {\n        className += \" btn-primary\";\n    }\n\n    return (\n        <button className={className} onClick={() => onClick(name, !value)}>\n            {label}\n        </button>\n    );\n};\n\nexport default Toggle;\n","import React from \"react\";\nimport Toggle from \"./Toggle\";\n\nclass ControlRow extends React.Component {\n    makePick = (picked, newState) => {\n        this.props.updateDataFilter(picked, !newState);\n    };\n\n    _addToggle(name) {\n        let key = `toggle-${name}`,\n            label = name;\n\n        if (this.props.capitalize) {\n            label = label.toUpperCase();\n        }\n\n        return (\n            <Toggle\n                label={label}\n                name={name}\n                key={key}\n                value={this.props.picked === name}\n                onClick={this.makePick}\n            />\n        );\n    }\n\n    render() {\n        const { toggleNames } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    {toggleNames.map(name => this._addToggle(name))}\n                </div>\n            </div>\n        );\n    }\n}\nexport default ControlRow;\n","import React from \"react\";\nimport ControlRow from \"./ControlRow\";\n\nclass Controls extends React.Component {\n    state = {\n        yearFilter: () => true,\n        jobTitleFilter: () => true,\n        USstateFilter: () => true,\n        year: \"*\",\n        jobTitle: \"*\",\n        USstate: \"*\"\n    };\n\n    componentDidMount() {\n        let [year, USstate, jobTitle] = window.location.hash\n            .replace(\"#\", \"\")\n            .split(\"-\");\n\n        if (year !== \"*\" && year) {\n            this.updateYearFilter(Number(year));\n        }\n\n        if (USstate !== \"*\" && USstate) {\n            this.updateUSstateFilter(USstate);\n        }\n\n        if (jobTitle !== \"*\" && jobTitle) {\n            this.updateJobTitleFilter(jobTitle);\n        }\n    }\n\n    updateYearFilter = (year, reset) => {\n        let filter = d => d.submit_date.getFullYear() === year;\n\n        if (reset || !year) {\n            filter = () => true;\n            year = \"*\";\n        }\n\n        this.setState(\n            {\n                yearFilter: filter,\n                year: year\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    updateJobTitleFilter = (title, reset) => {\n        let filter = d => d.clean_job_title === title;\n\n        if (reset || !title) {\n            filter = () => true;\n            title = \"*\";\n        }\n\n        this.setState(\n            {\n                jobTitleFilter: filter,\n                jobTitle: title\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    updateUSstateFilter = (USstate, reset) => {\n        let filter = d => d.USstate === USstate;\n\n        if (reset || !USstate) {\n            filter = () => true;\n            USstate = \"*\";\n        }\n\n        this.setState(\n            {\n                USstateFilter: filter,\n                USstate: USstate\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    reportUpdateUpTheChain() {\n        window.location.hash = [\n            this.state.year || \"*\",\n            this.state.USstate || \"*\",\n            this.state.jobTitle || \"*\"\n        ].join(\"-\");\n\n        this.props.updateDataFilter(\n            (filters => {\n                return d =>\n                    filters.yearFilter(d) &&\n                    filters.jobTitleFilter(d) &&\n                    filters.USstateFilter(d);\n            })(this.state),\n            {\n                year: this.state.year,\n                jobTitle: this.state.jobTitle,\n                USstate: this.state.USstate\n            }\n        );\n    }\n\n    render() {\n        const { data } = this.props;\n\n        const years = new Set(data.map(d => d.submit_date.getFullYear())),\n            jobTitles = new Set(data.map(d => d.clean_job_title)),\n            USstates = new Set(data.map(d => d.USstate));\n\n        return (\n            <div>\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(years.values())}\n                    picked={this.state.year}\n                    updateDataFilter={this.updateYearFilter}\n                />\n\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(jobTitles.values())}\n                    picked={this.state.jobTitle}\n                    updateDataFilter={this.updateJobTitleFilter}\n                />\n\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(USstates.values())}\n                    picked={this.state.USstate}\n                    updateDataFilter={this.updateUSstateFilter}\n                    capitalize\n                />\n            </div>\n        );\n    }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nimport \"./style.css\";\n\nimport Preloader from \"./components/Preloader\";\nimport { loadAllData } from \"./DataHandling\";\n\nimport CountyMap from \"./components/CountyMap\";\nimport Histogram from \"./components/Histogram\";\nimport { Title, Description } from \"./components/Meta\";\nimport MedianLine from \"./components/MedianLine\";\n\nimport Controls from \"./components/Controls\";\n\nclass App extends Component {\n    state = {\n        techSalaries: [],\n        medianIncomes: [],\n        countyNames: [],\n        salariesFilter: () => true,\n        filteredBy: {\n            USstate: \"*\",\n            year: \"*\",\n            jobTitle: \"*\"\n        }\n    };\n\n    componentDidMount() {\n        loadAllData(data => this.setState(data));\n    }\n\n    countyValue(county, techSalariesMap) {\n        const medianHousehold = this.state.medianIncomes[county.id],\n            salaries = techSalariesMap[county.name];\n\n        if (!medianHousehold || !salaries) {\n            return null;\n        }\n\n        const median = d3.median(salaries, d => d.base_salary);\n\n        return {\n            countyID: county.id,\n            value: median - medianHousehold.medianIncome\n        };\n    }\n\n    updateDataFilter = (filter, filteredBy) => {\n        this.setState({\n            salariesFilter: filter,\n            filteredBy: filteredBy\n        });\n    };\n\n    render() {\n        const {\n            techSalaries,\n            countyNames,\n            usTopoJson,\n            USstateNames,\n            filteredBy\n        } = this.state;\n\n        if (techSalaries.length < 1) {\n            return <Preloader />;\n        }\n\n        const filteredSalaries = techSalaries.filter(this.state.salariesFilter),\n            filteredSalariesMap = _.groupBy(filteredSalaries, \"countyID\"),\n            countyValues = countyNames\n                .map(county => this.countyValue(county, filteredSalariesMap))\n                .filter(d => !_.isNull(d));\n\n        let zoom = null,\n            medianHousehold = this.state.medianIncomesByUSState[\"US\"][0]\n                .medianIncome;\n\n        if (filteredBy.USstate !== \"*\") {\n            zoom = this.state.filteredBy.USstate;\n            medianHousehold = d3.mean(\n                this.state.medianIncomesByUSState[zoom],\n                d => d.medianIncome\n            );\n        }\n\n        return (\n            <div className=\"App container\">\n                <Title data={filteredSalaries} filteredBy={filteredBy} />\n                <Description\n                    data={filteredSalaries}\n                    allData={techSalaries}\n                    filteredBy={filteredBy}\n                    medianIncomesByCounty={this.state.medianIncomesByCounty}\n                />\n                <svg width=\"1100\" height=\"500\">\n                    <CountyMap\n                        usTopoJson={usTopoJson}\n                        USstateNames={USstateNames}\n                        values={countyValues}\n                        x={0}\n                        y={0}\n                        width={500}\n                        height={500}\n                        zoom={zoom}\n                    />\n\n                    <rect\n                        x=\"500\"\n                        y=\"0\"\n                        width=\"600\"\n                        height=\"500\"\n                        style={{ fill: \"white\" }}\n                    />\n\n                    <Histogram\n                        bins={10}\n                        width={500}\n                        height={500}\n                        x={500}\n                        y={10}\n                        data={filteredSalaries}\n                        axisMargin={83}\n                        bottomMargin={5}\n                        value={d => d.base_salary}\n                    />\n                    <MedianLine\n                        data={filteredSalaries}\n                        x={500}\n                        y={10}\n                        width={600}\n                        height={500}\n                        bottomMargin={5}\n                        median={medianHousehold}\n                        value={d => d.base_salary}\n                    />\n                </svg>\n                <Controls\n                    data={techSalaries}\n                    updateDataFilter={this.updateDataFilter}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/preloading.0e87f8f1.png\";"],"sourceRoot":""}